{
    "content": "<h1 id=\"gerrit-recommended-practices\">Gerrit Recommended Practices</h1>\n<p>This document presents some best practices to help you use Gerrit more\neffectively.  The intent is to show how content can be submitted easily. Use the\nrecommended practices to reduce your troubleshooting time and improve\nparticipation in the community.</p>\n<h2 id=\"browsing-the-git-tree\">Browsing the Git Tree</h2>\n<p>Visit <a href=\"https://gerrit.hyperledger.org/r/#/admin/projects/fabric\">Gerrit</a> then\nselect <code>Projects --&gt; List --&gt; SELECT-PROJECT --&gt; Branches</code>.  Select the branch\nthat interests you, click on <code>gitweb</code> located on the right-hand side.  Now,\n<code>gitweb</code> loads your selection on the Git web interface and redirects\nappropriately.</p>\n<h2 id=\"watching-a-project\">Watching a Project</h2>\n<p>Visit <a href=\"https://gerrit.hyperledger.org/r/#/admin/projects/fabric\">Gerrit</a>, then\nselect <code>Settings</code>, located on the top right corner. Select <code>Watched Projects</code>\nand then add any projects that interest you.</p>\n<h2 id=\"commit-messages\">Commit Messages</h2>\n<p>Gerrit follows the Git commit message format. Ensure the headers are at the\nbottom and don&rsquo;t contain blank lines between one another. The following example\nshows the format and content expected in a commit message:</p>\n<p>Brief (no more than 50 chars) one line description.</p>\n<p>Elaborate summary of the changes made referencing why (motivation), what was\nchanged and how it was tested. Note also any changes to documentation made to\nremain consistent with the code changes, wrapping text at 72 chars/line.</p>\n<p>Jira: FAB-100<br />\n   Change-Id: LONGHEXHASH<br />\n   Signed-off-by: Your Name your.email@example.org<br />\n   AnotherExampleHeader: An Example of another Value</p>\n<p>The Gerrit server provides a precommit hook to autogenerate the Change-Id which\nis one time use.</p>\n<p><strong>Recommended reading:</strong> <a href=\"http://chris.beams.io/posts/git-commit/\">How to Write a Git Commit Message</a></p>\n<h2 id=\"avoid-pushing-untested-work-to-a-gerrit-server\">Avoid Pushing Untested Work to a Gerrit Server</h2>\n<p>To avoid pushing untested work to Gerrit.</p>\n<p>Check your work at least three times before pushing your change to Gerrit.\nBe mindful of what information you are publishing.</p>\n<h2 id=\"keeping-track-of-changes\">Keeping Track of Changes</h2>\n<ul>\n<li>\n<p>Set Gerrit to send you emails:</p>\n</li>\n<li>\n<p>Gerrit will add you to the email distribution list for a change if a\n    developer adds you as a reviewer, or if you comment on a specific Patch\n    Set.</p>\n</li>\n<li>\n<p>Opening a change in Gerrit&rsquo;s review interface is a quick way to follow that\n  change.</p>\n</li>\n<li>\n<p>Watch projects in the Gerrit projects section at <code>Gerrit</code>, select at least\n   <em>New Changes, New Patch Sets, All Comments</em> and <em>Submitted Changes</em>.</p>\n</li>\n</ul>\n<p>Always track the projects you are working on; also see the feedback/comments\nmailing list to learn and help others ramp up.</p>\n<h2 id=\"topic-branches\">Topic branches</h2>\n<p>Topic branches are temporary branches that you push to commit a set of\nlogically-grouped dependent commits:</p>\n<p>To push changes from <code>REMOTE/master</code> tree to Gerrit for being reviewed as\na topic in  <strong>TopicName</strong> use the following command as an example:</p>\n<p>$ git push REMOTE HEAD:refs/for/master/TopicName</p>\n<p>The topic will show up in the review :abbr:<code>UI</code> and in the\n<code>Open Changes List</code>.  Topic branches will disappear from the master\ntree when its content is merged.</p>\n<h2 id=\"creating-a-cover-letter-for-a-topic\">Creating a Cover Letter for a Topic</h2>\n<p>You may decide whether or not you&rsquo;d like the cover letter to appear in the\nhistory.</p>\n<ol>\n<li>To make a cover letter that appears in the history, use this command:</li>\n</ol>\n<pre><code>git commit --allow-empty\n</code></pre>\n\n<p>Edit the commit message, this message then becomes the cover letter.\nThe command used doesn&rsquo;t change any files in the source tree.</p>\n<ol>\n<li>\n<p>To make a cover letter that doesn&rsquo;t appear in the history follow these steps:</p>\n</li>\n<li>\n<p>Put the empty commit at the end of your commits list so it can be ignored<br />\n   without having to rebase.</p>\n</li>\n<li>\n<p>Now add your commits</p>\n</li>\n</ol>\n<pre><code>git commit ...\ngit commit ...\ngit commit ...\n</code></pre>\n\n<ul>\n<li>Finally, push the commits to a topic branch.  The following command is an\n     example:</li>\n</ul>\n<pre><code>git push REMOTE HEAD:refs/for/master/TopicName\n</code></pre>\n\n<p>If you already have commits but you want to set a cover letter, create an empty\ncommit for the cover letter and move the commit so it becomes the last commit\non the list. Use the following command as an example:</p>\n<pre><code>git rebase -i HEAD~#Commits\n</code></pre>\n\n<p>Be careful to uncomment the commit before moving it.\n<code>#Commits</code> is the sum of the commits plus your new cover letter.</p>\n<h2 id=\"finding-available-topics\">Finding Available Topics</h2>\n<pre><code>   $ ssh -p 29418 gerrit.hyperledger.org gerrit query \\ status:open project:fabric branch:master \\\n   | grep topic: | sort -u\n</code></pre>\n\n<ul>\n<li><a href=\"\">gerrit.hyperledger.org</a> Is the current URL where the project is hosted.</li>\n<li><em>status</em> Indicates the topic&rsquo;s current status: open , merged, abandoned, draft,\nmerge conflict.</li>\n<li><em>project</em> Refers to the current name of the project, in this case fabric.</li>\n<li><em>branch</em> The topic is searched at this branch.</li>\n<li><em>topic</em> The name of an specific topic, leave it blank to include them all.</li>\n<li><em>sort</em> Sorts the found topics, in this case by update (-u).</li>\n</ul>\n<h2 id=\"downloading-or-checking-out-a-change\">Downloading or Checking Out a Change</h2>\n<p>In the review UI, on the top right corner, the <strong>Download</strong> link provides a\nlist of commands and hyperlinks to checkout or download diffs or files.</p>\n<p>We recommend the use of the <em>git review</em> plugin.\nThe steps to install git review are beyond the scope of this document.\nRefer to the <a href=\"https://wiki.openstack.org/wiki/Documentation/HowTo/FirstTimers\">git review documentation</a> for the installation process.</p>\n<p>To check out a specific change using Git, the following command usually works:</p>\n<pre><code>git review -d CHANGEID\n</code></pre>\n\n<p>If you don&rsquo;t have Git-review installed, the following commands will do the same\nthing:</p>\n<pre><code>git fetch REMOTE refs/changes/NN/CHANGEIDNN/VERSION \\ &amp;&amp; git checkout FETCH_HEAD\n</code></pre>\n\n<p>For example, for the 4th version of change 2464, NN is the first two digits\n(24):</p>\n<pre><code>git fetch REMOTE refs/changes/24/2464/4 \\ &amp;&amp; git checkout FETCH_HEAD\n</code></pre>\n\n<h2 id=\"using-draft-branches\">Using Draft Branches</h2>\n<p>You can use draft branches to add specific reviewers before you publishing your\nchange.  The Draft Branches are pushed to <code>refs/drafts/master/TopicName</code></p>\n<p>The next command ensures a local branch is created:</p>\n<pre><code>git checkout -b BRANCHNAME\n</code></pre>\n\n<p>The next command pushes your change to the drafts branch under <strong>TopicName</strong>:</p>\n<pre><code>git push REMOTE HEAD:refs/drafts/master/TopicName\n</code></pre>\n\n<h2 id=\"using-sandbox-branches\">Using Sandbox Branches</h2>\n<p>You can create your own branches to develop features. The branches are pushed to\nthe <code>refs/sandbox/USERNAME/BRANCHNAME</code> location.</p>\n<p>These commands ensure the branch is created in Gerrit&rsquo;s server.</p>\n<pre><code>git checkout -b sandbox/USERNAME/BRANCHNAME\ngit push --set-upstream REMOTE HEAD:refs/heads/sandbox/USERNAME/BRANCHNAME\n</code></pre>\n\n<p>Usually, the process to create content is:</p>\n<ul>\n<li>develop the code,</li>\n<li>break the information into small commits,</li>\n<li>submit changes,</li>\n<li>apply feedback,</li>\n<li>rebase.</li>\n</ul>\n<p>The next command pushes forcibly without review:</p>\n<pre><code>git push REMOTE sandbox/USERNAME/BRANCHNAME\n</code></pre>\n\n<p>You can also push forcibly with review:</p>\n<pre><code>git push REMOTE HEAD:ref/for/sandbox/USERNAME/BRANCHNAME\n</code></pre>\n\n<h2 id=\"updating-the-version-of-a-change\">Updating the Version of a Change</h2>\n<p>During the review process, you might be asked to update your change. It is\npossible to submit multiple versions of the same change. Each version of the\nchange is called a patch set.</p>\n<p>Always maintain the <strong>Change-Id</strong> that was assigned.\nFor example, there is a list of commits, <strong>c0&hellip;c7</strong>, which were submitted as a\ntopic branch:</p>\n<pre><code>git log REMOTE/master..master\n\nc0\n...\nc7\n\ngit push REMOTE HEAD:refs/for/master/SOMETOPIC\n</code></pre>\n\n<p>After you get reviewers&rsquo; feedback, there are changes in <strong>c3</strong> and <strong>c4</strong> that\nmust be fixed.  If the fix requires rebasing, rebasing changes the commit Ids,\nsee the <a href=\"http://git-scm.com/book/en/v2/Git-Branching-Rebasing\">rebasing</a> section\nfor more information. However, you must keep the same Change-Id and push the\nchanges again:</p>\n<pre><code>git push REMOTE HEAD:refs/for/master/SOMETOPIC\n</code></pre>\n\n<p>This new push creates a patches revision, your local history is then cleared.\nHowever you can still access the history of your changes in Gerrit on the\n<code>review UI</code> section, for each change.</p>\n<p>It is also permitted to add more commits when pushing new versions.</p>\n<h2 id=\"rebasing\">Rebasing</h2>\n<p>Rebasing is usually the last step before pushing changes to Gerrit; this allows\nyou to make the necessary <em>Change-Ids</em>.  The <em>Change-Ids</em> must be kept the same.</p>\n<ul>\n<li><strong>squash:</strong> mixes two or more commits into a single one.</li>\n<li><strong>reword:</strong> changes the commit message.</li>\n<li><strong>edit:</strong> changes the commit content.</li>\n<li><strong>reorder:</strong> allows you to interchange the order of the commits.</li>\n<li><strong>rebase:</strong> stacks the commits on top of the master.</li>\n</ul>\n<h2 id=\"rebasing-during-a-pull\">Rebasing During a Pull</h2>\n<p>Before pushing a rebase to your master, ensure that the history has a\nconsecutive order.</p>\n<p>For example, your <code>REMOTE/master</code> has the list of commits from <strong>a0</strong> to\n<strong>a4</strong>; Then, your changes <strong>c0&hellip;c7</strong> are on top of <strong>a4</strong>; thus:</p>\n<pre><code>git log --oneline REMOTE/master..master\n\na0\na1\na2\na3\na4\nc0\nc1\n...\nc7\n</code></pre>\n\n<p>If <code>REMOTE/master</code> receives commits <strong>a5</strong>, <strong>a6</strong> and <strong>a7</strong>. Pull with a\nrebase as follows:</p>\n<pre><code>git pull --rebase REMOTE master\n</code></pre>\n\n<p>This pulls <strong>a5-a7</strong> and re-apply <strong>c0-c7</strong> on top of them:</p>\n<pre><code>   $ git log --oneline REMOTE/master..master\n   a0\n   ...\n   a7\n   c0\n   c1\n   ...\n   c7\n</code></pre>\n\n<h2 id=\"getting-better-logs-from-git\">Getting Better Logs from Git</h2>\n<p>Use these commands to change the configuration of Git in order to produce better\nlogs:</p>\n<pre><code>git config log.abbrevCommit true\n</code></pre>\n\n<p>The command above sets the log to abbreviate the commits&rsquo; hash.</p>\n<pre><code>git config log.abbrev 5\n</code></pre>\n\n<p>The command above sets the abbreviation length to the last 5 characters of the\nhash.</p>\n<pre><code>git config format.pretty oneline\n</code></pre>\n\n<p>The command above avoids the insertion of an unnecessary line before the Author\nline.</p>\n<p>To make these configuration changes specifically for the current Git user,\nyou must add the path option <code>--global</code> to <code>config</code> as follows:</p>",
    "language": "en",
    "url": "/Gerrit/best-practices/",
    "title": "Best Practices"
}