{
    "content": "<h3 id=\"no-op-system-chaincode\">NO-OP system chaincode</h3>\n<p>NO-OP is a system chaincode that does nothing when invoked. The parameters of the invoke transaction are stored on the ledger so it is possible to encode arbitrary data into them.</p>\n<h4 id=\"functions-and-valid-options\">Functions and valid options</h4>\n<ul>\n<li>Invoke transactions have to be called with <em>&lsquo;execute&rsquo;</em> as function name and at least one argument. Only the <strong>first argument</strong> is used. Note that it should be <strong>encoded with BASE64</strong>.</li>\n<li>Only one type of query is supported: <em>&lsquo;getTran&rsquo;</em> (passed as a function name). GetTran has to get a transaction ID as argument in hexadecimal format. The function looks up the corresponding transaction&rsquo;s (if any) <strong>first argument</strong> and tries to <strong>decode it as a BASE64 encoded string</strong>.</li>\n</ul>\n<h4 id=\"testing\">Testing</h4>\n<p>NO-OP has unit tests checking invocation and queries using proper/improper arguments. The chaincode implementation provides a facility for mocking the ledger under the chaincode (<em>mockLedgerH</em> in struct <em>chaincode.SystemChaincode</em>). This should only be used for testing as it is dangerous to rely on global variables in memory that can hold state across invokes.</p>",
    "language": "en",
    "url": "/SystemChaincodes/noop/",
    "title": "System Chaincode"
}