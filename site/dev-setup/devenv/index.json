{
    "content": "<h2 id=\"setting-up-the-development-environment\">Setting up the development environment</h2>\n<h3 id=\"overview\">Overview</h3>\n<p>The current development environment utilizes Vagrant running an Ubuntu image, which in turn launches Docker containers. Conceptually, the Host launches a VM, which in turn launches Docker containers.</p>\n<p><strong>Host -&gt; VM -&gt; Docker</strong></p>\n<p>This model allows developers to leverage their favorite OS/editors and execute the system in a controlled environment that is consistent amongst the development team.</p>\n<ul>\n<li>Note that your Host should not run within a VM. If you attempt this, the VM within your Host may fail to boot with a message indicating that VT-x is not available.</li>\n</ul>\n<h3 id=\"prerequisites\">Prerequisites</h3>\n<ul>\n<li><a href=\"https://git-scm.com/downloads\">Git client</a></li>\n<li><a href=\"https://golang.org/\">Go</a> - 1.6 or later</li>\n<li><a href=\"https://www.vagrantup.com/\">Vagrant</a> - 1.7.4 or later</li>\n<li><a href=\"https://www.virtualbox.org/\">VirtualBox</a> - 5.0 or later</li>\n<li>\n<p>BIOS Enabled Virtualization - Varies based on hardware</p>\n</li>\n<li>\n<p>Note: The BIOS Enabled Virtualization may be within the CPU or Security settings of the BIOS</p>\n</li>\n</ul>\n<h3 id=\"steps\">Steps</h3>\n<h4 id=\"set-your-gopath\">Set your GOPATH</h4>\n<p>Make sure you have properly setup your Host&rsquo;s <a href=\"https://github.com/golang/go/wiki/GOPATH\">GOPATH environment variable</a>. This allows for both building within the Host and the VM.</p>\n<h4 id=\"note-to-windows-users\">Note to Windows users</h4>\n<p>If you are running Windows, before running any <code>git clone</code> commands, run the following command.</p>\n<pre><code>git config --get core.autocrlf\n</code></pre>\n\n<p>If <code>core.autocrlf</code> is set to <code>true</code>, you must set it to <code>false</code> by running</p>\n<pre><code>git config --global core.autocrlf false\n</code></pre>\n\n<p>If you continue with <code>core.autocrlf</code> set to <code>true</code>, the <code>vagrant up</code> command will fail with the error <code>./setup.sh: /bin/bash^M: bad interpreter: No such file or directory</code></p>\n<h4 id=\"cloning-the-fabric-project\">Cloning the Fabric project</h4>\n<p>Since the Fabric project is a <code>Go</code> project, you&rsquo;ll need to clone the Fabric repo to your $GOPATH/src directory. If your $GOPATH has multiple path components, then you will want to use the first one. There&rsquo;s a little bit of setup needed:</p>\n<pre><code>cd $GOPATH/src\nmkdir -p github.com/hyperledger\ncd github.com/hyperledger\n</code></pre>\n\n<p>Recall that we are using <code>Gerrit</code> for source control, which has its own internal git repositories. Hence, we will need to <a href=\"../../Gerrit/gerrit/#Working-with-a-local-clone-of-the-repository\">clone from Gerrit</a>. For brevity, the command is as follows:</p>\n<pre><code>git clone ssh://LFID@gerrit.hyperledger.org:29418/fabric &amp;&amp; scp -p -P 29418 LFID@gerrit.hyperledger.org:hooks/commit-msg fabric/.git/hooks/\n</code></pre>\n\n<p><strong>Note:</strong> of course, you would want to replace <code>LFID</code> with your <a href=\"../../Gerrit/lf-account/\">Linux Foundation ID</a>.</p>\n<h4 id=\"boostrapping-the-vm-using-vagrant\">Boostrapping the VM using Vagrant</h4>\n<p>Now you&rsquo;re ready to launch Vagrant.</p>\n<pre><code>cd $GOPATH/src/github.com/hyperledger/fabric/devenv\nvagrant up\n</code></pre>\n\n<p>Go get coffee&hellip; this will take a few minutes. Once complete, you should be able to <code>ssh</code> into the Vagrant VM just created.</p>\n<pre><code>vagrant ssh\n</code></pre>\n\n<h3 id=\"building-the-fabric\">Building the fabric</h3>\n<p>Once you have your vagrant development environment established, you can proceed to <a href=\"../build/\">build and test</a> the fabric. Once inside the VM, you can find the peer project under <code>$GOPATH/src/github.com/hyperledger/fabric</code>. It is also mounted as  <code>/hyperledger</code>.</p>\n<h3 id=\"notes\">Notes</h3>\n<p><strong>NOTE:</strong> any time you change any of the files in your local fabric directory (under <code>$GOPATH/src/github.com/hyperledger/fabric</code>), the update will be instantly available within the VM fabric directory.</p>\n<p><strong>NOTE:</strong> If you intend to run the development environment behind an HTTP Proxy, you need to configure the guest so that the provisioning process may complete. You can achieve this via the <em>vagrant-proxyconf</em> plugin. Install with <code>vagrant plugin install vagrant-proxyconf</code> and then set the VAGRANT_HTTP_PROXY and VAGRANT_HTTPS_PROXY environment variables <em>before</em> you execute <code>vagrant up</code>. More details are available here: https://github.com/tmatilai/vagrant-proxyconf/</p>\n<p><strong>NOTE:</strong> The first time you run this command it may take quite a while to complete (it could take 30 minutes or more depending on your environment) and at times it may look like it&rsquo;s not doing anything. As long you don&rsquo;t get any error messages just leave it alone, it&rsquo;s all good, it&rsquo;s just cranking.</p>\n<p><strong>NOTE to Windows 10 Users:</strong> There is a known problem with vagrant on Windows 10 (see <a href=\"https://github.com/mitchellh/vagrant/issues/6754\">mitchellh/vagrant#6754</a>). If the <code>vagrant up</code> command fails it may be because you do not have Microsoft Visual C++ Redistributable installed. You can download the missing package at the following address: http://www.microsoft.com/en-us/download/details.aspx?id=8328</p>",
    "language": "en",
    "url": "/dev-setup/devenv/",
    "title": "Fabric Developer Setup"
}